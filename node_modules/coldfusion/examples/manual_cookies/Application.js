
// Define the factory object for Application.js. Since each incoming 
// request has to define a new instance of the Application.js, we 
// have to get around the module-based caching. This gives every 
// request the opportunity to re-define the settings (this is a good
// thing - and a very powerful thing).
module.exports = function( request, response ){


	// Define the application settings.
	this.name = "ColdFusion.js Test App";
	this.applicationTimeout = (2 * 60);
	this.sessionManagement = true;
	this.sessionTimeout = (1 * 20);
	
	
	// We are asking the ColdFusion.js framework NOT to 
	// automatically set the session cookies. This means it 
	// becomes our responsability to explicitly store a cookie 
	// in the onSessionStart() event handler and then create a 
	// this-scoped sessionID with each request.
	this.setClientCookies = false;
	
	// I am the unique sessionID that can be manually set in the 
	// case that the user wants to explicitly manage their own
	// session.
	this.sessionID = null;
	

	// ------------------------------------------------------ //
	// ------------------------------------------------------ //


	// Since we are setting our own secret, encrypted sessionID 
	// instead of asking ColdFusion.js to create it, it is now our
	// responsability to decrypt that cookie on each request so that
	// ColdFusion.js knows what we're doing.
	var secretKey = null;
	
	// Get the secret cookie and see if it exists.
	if (secretKey = request.cookies.get( "secretKey" )){

		// We now have to "decrypt" our secret cookie in order to 
		// make the sessionID available.
		secretKey = secretKey.replace(
			new RegExp( "^BLAM-|-BLAM$", "g" ),
			""
		);
		
		// Place the decrypted key back into the Application.js
		// instance so that ColdFusion.js knows how to associate the
		// incoming request with the right session. 
		this.sessionID = secretKey;
		
		// Log our sessionID crypto conversion.
		console.log( "IN >> " + request.cookies.get( "secretKey" ) );
		console.log( "SessionID >> " + this.sessionID );
		
	}


	// ------------------------------------------------------ //
	// ------------------------------------------------------ //


	// I initialize the session.
	this.onSessionStart = function( request, response, callback ){

		// Set our "encrypted" cookie since we don't want people
		// to see our sessionID. 
		// 
		// NOTE: I don't actually know how to use Node.js' crypto
		// library yet; so, I am using encrypt in the silliest
		// possible meaning of the term.
		response.cookies.set(
			"secretKey",
			("BLAM-" + request.session.getSessionID() + "-BLAM")
		);
		
		// Store out hitcount.
		request.session.set( "hitCount", 0 );
		
		// Return out so the framework knows the event is over.
		return( callback() );
		
	};
	
	
	// I process the request.
	this.onRequest = function( request, response ){
		
		// Increment our hit count.
		request.session.hitCount++;
		
		// Set the content type.
		response.setHeader( "content-type", "text/html" );
		
		// Write out some content.
		response.end( 
			"<h1>ColdFusion.js On Node.js</h1>" + 
			"<p>Hit count: " + request.session.hitCount + ".</p>"
		);
		
	};
	
	
};



