
// Include core libraries.
var events = require( "events" );

// Include the timed cache constructor. Each application is going to
// be a specialized version of a timed cache.
var TimedCache = require( "./timed-cache" );


// ---------------------------------------------------------- //
// ---------------------------------------------------------- //


// I am a application constructor.
function Application( name, timeout ){

	// Call the super constructor.
	TimedCache.call( this, timeout );
	
	var that = this;

	// Store the unique application name.
	this._name = name;
	
}


// Extend the event emitter class.
Application.prototype = Object.create( TimedCache.prototype );


// I return the application's unique name.
Application.prototype.getName = function(){

	// Return the unique name. 
	return( this._name );
	
};


// ---------------------------------------------------------- //
// ---------------------------------------------------------- //


// I am the application factory constructor.
function ApplicationFactory(){

	// Call the super constructor.
	events.EventEmitter.call( this );
	
	// I am the collection of active applications. Each application will
	// be indexed by a caller-defined name.
	this._applications = {};
	
}


// Extend the event emitter class. This will allow us to use the 
// on() and emit() methods.
ApplicationFactory.prototype = Object.create( events.EventEmitter.prototype );

	
// I get the application based on the given name.
ApplicationFactory.prototype.getApplication = function( name ){
	
	// Return the application. If it doesn't exist, this will 
	// return null. 
	return( this._applications[ name ] || null );
	
};
	
	
// I create and return a new application.
ApplicationFactory.prototype.newApplication = function( name, timeout ){
	
	var that = this;
	
	// Create a new application instance.
	var application = new Application( name, timeout );
	
	// Cache the application in the local collection.
	this._applications[ name ] = application;
	
	// Bind a one-time listener to the application for timeout. Once
	// the application times out once, the application factory does not
	// care about it any longer.
	application.once(
		"timeout",
		function(){

			// Delete the application from the active application.
			delete( that._applications[ application.getName() ] );
			
			// Emit the timeout event at the factory level and pass the
			// target application through.
			that.emit( "timeout", application );
			
		}
	);
	
	// Retuen the application instance.
	return( application );
	
};
	

// ---------------------------------------------------------- //
// ---------------------------------------------------------- //

// Create an instance of the application factory.
var applicationFactory = new ApplicationFactory();

// Export this application factory.
module.exports = applicationFactory;

