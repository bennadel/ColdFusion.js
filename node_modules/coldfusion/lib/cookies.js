
// Include core libraries.
var events = require( "events" );


// ---------------------------------------------------------- //
// ---------------------------------------------------------- //


// I am the cookies constructor function.
function Cookies( httpCookieString ){

	// Initialize super class properties. This will make sure that
	// two instances of the Cookies class don't accidentally share
	// and event listeners.
	events.EventEmitter.call( this );
	
	var that = this;

	// I am the collection of cookies.
	this._cookies = {};
	
	// Parse the incoming request cookies, if there are any.
	if (httpCookieString){
		
		// Split the cookies based on the delimiter.
		httpCookieString.split( ";" ).forEach(
			function( cookieString ) {

				// Split the cookie parts.
				var parts = cookieString.split( "=" );
				
				// Set the cookie - use the external API so all the 
				// event logic is used.
				that.set( 
					parts[ 0 ].trim(),
					(parts[ 1 ] || "").trim()
				);

			}
		);

	}

}


// Cookies extends event emitter so that we can announce when new 
// cookies have been set.
Cookies.prototype = new events.EventEmitter();


// I return the given cookie value.
Cookies.prototype.get = function( name, defaultValue ){

	// Return the given value or the default value.
	if (name in this._cookies){

		// Return the local cookie value.
		return( this._cookies[ name ] );

	} else {
		
		// Return the default value.
		return( defaultValue );
		
	}
	
};


// I delete a given cookie.
Cookies.prototype.remove = function( name ){
	
	// Delete the cookie.
	delete( this._cookies[ name ] );
	
	// Announce that a cookies has been deleted.
	this.emit( "remove", name );
	
	// Return this object reference for chaining.
	return( this );
	
};


// I set a given cookie.
Cookies.prototype.set = function( name, value ){
	
	// Store the cookie locally.
	this._cookies[ name ] = value;
	
	// Announce that a cookies has been set.
	this.emit( "set", name, value );
	
	// Return this object reference for chaining.
	return( this );
	
};


// ---------------------------------------------------------- //
// ---------------------------------------------------------- //


// Export an instance factory.
exports.newInstance = function( request ){

	// Return a new intsance.
	return( new Cookies( request ) );
	
};


